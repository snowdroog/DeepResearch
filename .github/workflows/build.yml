name: Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-app:
    name: Build App (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      # Linux-specific: Install system dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            python3 \
            libsqlite3-dev

      # macOS-specific: Ensure build tools are available
      - name: Setup macOS build tools
        if: runner.os == 'macOS'
        run: |
          xcode-select --print-path

      # Windows-specific: Setup build tools
      - name: Setup Windows build tools
        if: runner.os == 'Windows'
        run: |
          npm install --global windows-build-tools
        continue-on-error: true

      - name: Install dependencies
        run: npm ci
        env:
          npm_config_build_from_source: true

      - name: Build TypeScript
        run: npx tsc --noEmit

      - name: Build Vite app
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          # Check if dist directories exist
          if [ ! -d "dist/main" ]; then
            echo "Error: dist/main directory not found"
            exit 1
          fi
          if [ ! -d "dist/renderer" ]; then
            echo "Error: dist/renderer directory not found"
            exit 1
          fi
          if [ ! -d "dist/preload" ]; then
            echo "Error: dist/preload directory not found"
            exit 1
          fi
          echo "✅ All dist directories present"

          # Check for critical files
          if [ ! -f "dist/main/index.js" ]; then
            echo "Error: Main process entry point not found"
            exit 1
          fi
          if [ ! -f "dist/preload/index.js" ]; then
            echo "Error: Preload script not found"
            exit 1
          fi
          echo "✅ Critical build files present"
        shell: bash

      - name: Check build size
        run: |
          echo "## Build Size Report (${{ matrix.os }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY || true
          echo "" >> $GITHUB_STEP_SUMMARY
          du -sh dist/main/ >> $GITHUB_STEP_SUMMARY || true
          du -sh dist/renderer/ >> $GITHUB_STEP_SUMMARY || true
          du -sh dist/preload/ >> $GITHUB_STEP_SUMMARY || true
        shell: bash
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            dist/
            package.json
          retention-days: 7

  package-app:
    name: Package App (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [build-app]
    timeout-minutes: 45
    # Only package on main branch or manual trigger to save CI minutes
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      # Linux-specific dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            python3 \
            libsqlite3-dev \
            rpm \
            dpkg \
            fakeroot

      - name: Install dependencies
        run: npm ci
        env:
          npm_config_build_from_source: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}

      # Package the Electron app
      - name: Package Electron app (Linux)
        if: runner.os == 'Linux'
        run: npm run electron:build -- --linux --x64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package Electron app (macOS)
        if: runner.os == 'macOS'
        run: npm run electron:build -- --mac --x64 --arm64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Note: Code signing requires certificates - skip for now
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Package Electron app (Windows)
        if: runner.os == 'Windows'
        run: npm run electron:build -- --win --x64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List package output
        run: ls -lah release/
        shell: bash

      - name: Upload packaged app
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.os }}
          path: release/*
          retention-days: 14

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-app]
    if: always()

    steps:
      - name: Create build summary
        run: |
          echo "## Build Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Build Status: ${{ needs.build-app.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-app.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ Build failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Build completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Build artifacts have been uploaded and are available for download." >> $GITHUB_STEP_SUMMARY
          fi
